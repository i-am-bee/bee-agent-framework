[project]
name = "beeai-framework"
version="0.1.0"
license = "Apache-2.0"
readme = "README.md"
authors = [{ name = "IBM Corp." }]
maintainers = [
    { name = "Alex Bozarth", email = "ajbozart@us.ibm.com" },
    { name = "Akihiko Kuroda", email = "akuroda@us.ibm.com" },
    { name = "Angelo Danducci", email = "angelo.danducci.ii@ibm.com" },
    { name = "Graham White", email = "gwhite@uk.ibm.com" },
    { name = "Michael Desmond", email = "michael.desmond@gmail.com" },
    { name = "Nigel Jones", email = "jonesn@uk.ibm.com" },
    { name = "Lukáš Janeček", email = "xjacka@gmail.com" },
    { name = "Prattyush Mangal", email = "prattyush.mangal@ibm.com" },
    { name = "Tomas Dvorak", email = "toomas2d@gmail.com" },
    { name = "Va Barbosa", email = "va@us.ibm.com" },
]
requires-python = ">=3.11,<4.0"

[project.urls]
homepage = "https://iambee.ai"
repository = "https://github.com/i-am-bee/beeai-framework"
documentation = "https://i-am-bee.github.io/beeai-framework/#/python/"

[tool.poetry.dependencies]
python = ">= 3.11,<4.0"
pydantic = "^2.10"
requests = "^2.32"
pylint = "^3.3.2"
pydantic-settings = "^2.7"
chevron = "^0.14.0"
types-requests = "^2.32.0.20241016"
litellm = "^1.60.2"
aiofiles = "^24.1.0"
pyventus = "^0.6.0"
wikipedia = "^1.4.0"
mcp = "^1.2.0"
duckduckgo-search = "^7.3.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
commitizen = "^4.2.1"
poethepoet = "^0.32.2"
ruff = "^0.9.6"
tox = "^4.20"
mypy = "^1.15.0"
pytest-asyncio = "^0.25.3"
nbstripout = "^0.8.1"
pytest-cov = "^6.0.0"

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/beeai_framework"
exclude = "^build/$"
check_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.commitizen]
name = "cz_monorepo_commits"
tag_format = "python_v$version"
version_scheme = "semver"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true
bump_message = "chore: python release $new_version"

[tool.pytest.ini_options]
addopts = "-v --cov --cov-report html"
testpaths = ["tests", "beeai_framework"]
python_files = ["test_*.py", "*_test.py"]
markers = [
    "unit",
    "integration",
    "e2e",
    "extension"
]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = "ignore::DeprecationWarning:pydantic" # some dependencies still use the deprecated class-based config

[tool.pytest-asyncio]
asyncio_mode = "strict"
default_fixture_loop_scope = "function"

[tool.coverage.run]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover", # re-enable the standard pragma
    "pass",             # Skip any pass lines such as may be used for @abstractmethod
]

[tool.poe.tasks.clean]
help = "Remove all artifacts and builds"
sequence = [
    { script = "shutil:rmtree('build/', ignore_errors=1)"},
    { script = "shutil:rmtree('dist/', ignore_errors=1)"}
]

[tool.poe.tasks.build]
help = "Build a package"
cmd = "poetry build"

[tool.poe.tasks.commit]
help = "Creates a commit"
cmd = "cz commit"

[tool.poe.tasks.format]
help = "Run all formating tools"
control.expr = "fix"
args = [
    { name = "TARGET", positional = true, multiple = true },
    { name = "fix", options = ["--fix"], type = "boolean", help = "Apply fixes instead of checking" }
]
uses = { PY_FILES = "_extract_python_files $TARGET" }

    [[tool.poe.tasks.format.switch]]
        case = "True"
        cmd = "ruff format ${PY_FILES}"

    [[tool.poe.tasks.format.switch]]
        cmd = "ruff format --check ${PY_FILES}"

[tool.poe.tasks.lint]
help = "Check for errors and fix them using ruff"
args = [
    { name = "TARGET", positional = true, multiple = true },
    { name = "FIX", options = ["--fix"], type = "boolean", help = "Apply fixes instead of checking" }
]
uses = { PY_FILES = "_extract_python_files $TARGET" }
cmd = "ruff check ${FIX:+--fix} ${PY_FILES}"

[tool.poe.tasks.git]
control.expr = "hook"
cwd = ".."
args = ["hook", { name = "TARGET", positional = true, multiple = true }]
default = "pass"

    [[tool.poe.tasks.git.switch]]
    case = "commit-msg"
    shell = "cz check --allow-abort --commit-msg-file $TARGET"

    [[tool.poe.tasks.git.switch]]
    case = "pre-commit"
    sequence = [
        { "ref" = "copyright ${TARGET}"},
        { "ref" = "format --fix ${TARGET}"},
        { "ref" = "lint --fix ${TARGET}" },
        { "shell" = "echo ${TARGET} | xargs -r git add" }
    ]

[tool.poe.tasks.docs]
help = "Documentation related commands"
control.expr = "type"
args = ["type"]

    [[tool.poe.tasks.docs.switch]]
    case = "build"
    help = "Update sources for the documentation"
    sequence = [
        { shell = "npx --yes embedme --source-root=. docs/**/*.md" },
        { "ref" = "format --fix docs"},
        { "ref" = "lint --fix docs" },
        { "shell" = "git add -u docs" }
    ]

    [[tool.poe.tasks.docs.switch]]
    case = "check"
    help = "Update sources for the documentation"
    sequence = [
        { shell = "npx --yes embedme --source-root=. docs/**/*.md --verify" },
    ]

    [[tool.poe.tasks.docs.switch]]
    case = "watch"
    help = "Open docs web dev mode"
    shell = "npx --yes docsify-cli serve ./docs --open"

[tool.poe.tasks.copyright]
help = "Copyright headers"
args = [{ name = "TARGET", positional = true, multiple = true }, { name = "type", options = ["--type"], default = "add" }]
cwd = "."
shell = "TYPE=${type} ./scripts/copyright.sh"

[tool.poe.tasks.release]
help = "Release a new version"
sequence = [
    { shell = '[ -z "$(git status -uno --porcelain)" ] || { echo "Your index contains uncommitted changes! Commit them and try again." && exit 1; }' },
    { "ref" = "clean"},
    { "cmd" = "cz bump"},
    { "script" = "scripts.absolute_links:update('README.md')"},
    { "cmd" = "poetry publish --build --dry-run" },
    { "shell" = "git add README.md >/dev/null && git checkout HEAD README.md >/dev/null" },
    { "cmd" = "git push && git push origin $(git describe --tags --exact-match)"}
]

[tool.poe.tasks.test]
args = ["type"]
control.expr = "type"

    [[tool.poe.tasks.test.switch]]
    case = "unit"
    help = "Run Unit Tests"
    cmd = "pytest -m 'unit'"

    [[tool.poe.tasks.test.switch]]
    case = "integration"
    help = "Run Integration Tests"
    cmd = "pytest -m 'integration' tests/integration"

    [[tool.poe.tasks.test.switch]]
    case = "extension"
    help = "Run Extension Tests"
    cmd = "pytest -m 'integration'"

    [[tool.poe.tasks.test.switch]]
    case = "e2e"
    help = "Run E2E Tests"
    cmd = "pytest -m 'e2e'"

    [[tool.poe.tasks.test.switch]]
    help = "Run All Tests"
    cmd = "pytest"

[tool.poe.tasks._extract_python_files]
help = "Extract Python files only"
args = [{ name = "TARGET", positional = true, multiple = true }]
shell = "printf '%s\\n' $TARGET | grep -E '\\.(py|ipynb)$' | tr '\\n' ' '"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins."commitizen.plugin"]
cz_monorepo_commits = "cz_commitizen:MonorepoCommitsCz"

[tool.ruff]
lint.select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "UP",    # pyupgrade
    "I",     # isort
    "B",     # bugbear
    "ANN",   # annotations
    "N",     # pep8-naming
    "C4",    # Comprehensions
    "DTZ",   # DatetimeZ
    "Q",     # Quotes
    "SIM",   # Simplify
    "RUF",   # Ruff
    "TID",   # tidy-imports
    "ASYNC", # async
]
force-exclude = true
lint.ignore = ["ANN401"]
lint.fixable = ["ALL"]
lint.unfixable = []
line-length = 120

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = ["E501"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports, "parents" | "all"
ban-relative-imports = "all"
